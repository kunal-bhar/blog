{
  
    
        "post0": {
            "title": "Shakespearean English Semantics",
            "content": "Project At A Glance . Objective: Evaluate and visualize relationships between annotations of the era&#39;s literature. . Data: Compiled Shakespeare Dataset [Download]/ShakespeareDataset.txt) . Implementation: Word2Vec, Word Embeddings, Principal Component Analysis . Results: . 100-parameter vectorized representation of every word in the corpus. | Computed similarility scores for distinct words of the time period relative to today&#39;s English language. | Scatter plots to visualize Word-Embeddings and their Principal Components. | . Deployment: View this project on GitHub). . Dependencies . import pandas as pd import nltk import string import matplotlib.pyplot as plt from nltk.corpus import stopwords from nltk import word_tokenize from gensim.models import Word2Vec as w2v from sklearn.decomposition import PCA . Initialization . PATH = &#39;ShakespeareDataset.txt&#39; sw = stopwords.words(&#39;english&#39;) plt.style.use(&#39;ggplot&#39;) . %%time lines = [] with open(PATH, &#39;r&#39;) as f: for l in f: lines.append(l) . Wall time: 70.5 ms . Text Pre-Processing . lines = [line.rstrip(&#39; n&#39;) for line in lines] lines = [line.lower() for line in lines] lines = [line.translate(str.maketrans(&#39;&#39;, &#39;&#39;, string.punctuation)) for line in lines] . %time lines = [word_tokenize(line) for line in lines] . Wall time: 15.3 s . def remove_stopwords(lines, sw = sw): res = [] for line in lines: original = line line = [w for w in line if w not in sw] if len(line) &lt; 1: line = original res.append(line) return res . %time filtered_lines = remove_stopwords(lines = lines, sw = sw) . Wall time: 2.03 s . Custom Word2Vec and Word-Similarity . %%time w = w2v( filtered_lines, min_count=3, sg = 1, window=7 ) . Wall time: 3.22 s . w.wv.most_similar(&#39;thou&#39;) . [(&#39;art&#39;, 0.8374333381652832), (&#39;thyself&#39;, 0.8162680864334106), (&#39;dost&#39;, 0.7874499559402466), (&#39;villain&#39;, 0.7856082320213318), (&#39;kill&#39;, 0.733100950717926), (&#39;hast&#39;, 0.7226855158805847), (&#39;wilt&#39;, 0.7046181559562683), (&#39;didst&#39;, 0.6970406770706177), (&#39;fellow&#39;, 0.696016788482666), (&#39;traitor&#39;, 0.6928953528404236)] . w.wv.most_similar(&#39;shall&#39;) . [(&#39;may&#39;, 0.8649993538856506), (&#39;could&#39;, 0.8336020708084106), (&#39;youll&#39;, 0.8054620623588562), (&#39;doth&#39;, 0.8045750856399536), (&#39;till&#39;, 0.7994358539581299), (&#39;business&#39;, 0.7948688864707947), (&#39;ill&#39;, 0.7912845611572266), (&#39;dare&#39;, 0.7817249298095703), (&#39;let&#39;, 0.7762875556945801), (&#39;might&#39;, 0.776180624961853)] . w.wv.most_similar(&#39;abhor&#39;) . [(&#39;revenue&#39;, 0.9962968826293945), (&#39;exercise&#39;, 0.9959706664085388), (&#39;wedlock&#39;, 0.9957810640335083), (&#39;fever&#39;, 0.995772659778595), (&#39;painting&#39;, 0.9955847263336182), (&#39;arthurs&#39;, 0.9955565929412842), (&#39;touched&#39;, 0.9955466985702515), (&#39;purgation&#39;, 0.9953007698059082), (&#39;devotion&#39;, 0.9951791763305664), (&#39;havior&#39;, 0.9951609373092651)] . w.wv.most_similar(&#39;vile&#39;) . [(&#39;form&#39;, 0.9728872776031494), (&#39;monstrous&#39;, 0.9698807597160339), (&#39;smiling&#39;, 0.9687707424163818), (&#39;merit&#39;, 0.9668200016021729), (&#39;savage&#39;, 0.9668026566505432), (&#39;blown&#39;, 0.9667961597442627), (&#39;tremble&#39;, 0.9661442041397095), (&#39;worm&#39;, 0.9657843112945557), (&#39;quite&#39;, 0.9650156497955322), (&#39;giddy&#39;, 0.9649045467376709)] . Generate Embedding DataFrame . %%time emb_df = ( pd.DataFrame( [w.wv.get_vector(str(n)) for n in w.wv.key_to_index], index = w.wv.key_to_index ) ) . Wall time: 797 ms . emb_df.shape . (11628, 100) . emb_df.head() . 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99 . thou 0.048444 | -0.179371 | 0.656354 | 0.553357 | -0.390886 | -0.399313 | 0.408025 | 0.459145 | -0.405728 | -0.201803 | ... | 0.168611 | 0.248811 | 0.342443 | -0.067844 | 1.087360 | 0.751683 | -0.544332 | -0.557544 | 0.064042 | 0.441012 | . thy 0.025636 | 0.257252 | 0.512183 | 0.255503 | 0.298671 | -0.194974 | 0.258179 | 0.727472 | -0.141695 | -0.345477 | ... | 0.183475 | -0.138357 | 0.696960 | -0.215607 | 0.402519 | 0.359478 | 0.072248 | -0.589917 | 0.021417 | 0.011141 | . shall -0.059704 | 0.162047 | -0.045949 | -0.057693 | 0.579027 | -0.023031 | 0.043291 | 0.445429 | -0.326463 | 0.111084 | ... | 0.486898 | 0.051414 | 0.056035 | -0.147839 | 0.489713 | 0.178388 | 0.121662 | -0.007791 | 0.305106 | 0.014491 | . thee -0.437681 | 0.170327 | 0.516488 | 0.250964 | 0.051163 | -0.085569 | 0.174727 | 0.692341 | -0.266182 | -0.164628 | ... | 0.455216 | 0.022709 | 0.256135 | -0.054368 | 0.635989 | 0.482457 | -0.008304 | -0.079286 | 0.276732 | 0.008572 | . good 0.068176 | 0.297002 | 0.267275 | -0.144337 | 0.127091 | 0.131793 | 0.484557 | 0.709339 | -0.335214 | 0.117829 | ... | 0.368580 | -0.192079 | 0.248281 | -0.377771 | 0.294786 | -0.042967 | 0.284816 | -0.195110 | 0.345721 | -0.013074 | . 5 rows × 100 columns . Word-Embedding Visualization . plt.clf() fig=plt.figure(figsize=(6,4)) plt.scatter( x = emb_df.iloc[:,0], y = emb_df.iloc[:,1], s = 0.2, color = &#39;maroon&#39;, alpha = 0.5 ) plt.title(&#39;Embedding Visualizations&#39;) plt.show() . &lt;Figure size 432x288 with 0 Axes&gt; . Principal Component Analysis . Processing . pca = PCA(n_components=2, random_state=7) pca_model = pca.fit_transform(emb_df) . emb_df_PCA = ( pd.DataFrame( pca_model, columns=[&#39;x&#39;,&#39;y&#39;], index = emb_df.index ) ) . Visualization . plt.clf() fig = plt.figure(figsize=(6,4)) plt.scatter( x = emb_df_PCA[&#39;x&#39;], y = emb_df_PCA[&#39;y&#39;], s = 0.4, color = &#39;maroon&#39;, alpha = 0.5 ) plt.xlabel(&#39;PCA-1&#39;) plt.ylabel(&#39;PCA-2&#39;) plt.title(&#39;PCA Visualization&#39;) plt.plot() plt.show() . &lt;Figure size 432x288 with 0 Axes&gt; .",
            "url": "https://kunal-bhar.github.io/blog/nlp/python/english/visualizations/2022/03/10/shakespeare-semantics.html",
            "relUrl": "/nlp/python/english/visualizations/2022/03/10/shakespeare-semantics.html",
            "date": " • Mar 10, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "probplotlib- Open Source Python Library",
            "content": "Project At A Glance . Objective: Higher-order mathematical operations using Python3. . Implementation: A lightwight library capable of parsing data directly as Probability Distributions - available as a Python installation through pip. . Results: . Concise calculations that eliminate double-precision. | Compatibility with external datasets (.txt). | Faster than NumPy operatives by ~13%. | . Deployment: View this project on the Python Package Index or GitHub. . Probability Distributions for Python . . The Statistical Void . Stats can get tricky in the transition from plotting fun graphs to advanced algebraic equations. A classic example is the given sum: . 1.0e14 + 1.0 - 1.0e14 . The actual result is 1.0 but in double precision, this will result in 0.0. While in this example the failure is quite obvious, it can get a lot trickier than that. Instances like these hinder the community from exploring the inferential potential of complex entities. . p=Gaussian(a,b) q=Gaussian(x,y) p+q . This snippet would be close to useless as python addition doesn’t isn’t attributed for higher-level declarables such as Gaussian variables. probplotlib provides simple solutions for probability distributions; posing a highly-optimized alternative to numpy and math, in a niche that is scarce in options. . Usage . probplotlib has the following operative methods: . + : uses Dunder Methods for facilitating dist-additions. . | calculate_mean(): returns the mean of a distribution. . | . gaussianex = Gaussian() calculate_mean(gaussianx) . calculate_stdev(): returns the standard deviation of a distribution. | . binomialex = Binomial() calculate_stdev(binomialex) . read_dataset(): reads an external .txt dataset directly as a distribution. | . gaussianex.read_dataset(&#39;values.txt&#39;) binomialex.read_dataset(&#39;values.txt&#39;) . params(): retrieves the identity parameters of an imported dataset. | . gaussianex.params() binomialex.params() . pdf(): returns the probability density function at a given point. | . pdf(gaussianex, 2) . functions unique to Gaussian Distributions: . plot_histogram(): uses matplotlib to display a histogram of the Gaussian Distribution. | . gaussianex.plot_histogram() . plot_histogram_pdf(): uses matplotlib to display a co-relative plot along with the Gaussian probability density function. | . gaussianex.plot_histogram_pdf() . functions unique to Binomial Distributions: . plot_bar(): uses matplotlib to display a bar graph of the Binomial Distribution. | . binomialex.plot_bar() . plot_bar_pdf(): uses matplotlib to display a co-relative plot along with the Binomial probability density function. | . binomialex.plot_bar_pdf() . Data Visualization . probplotlib therefore allows you to analyze raw numerical data graphically in minimial lines of code. The example below makes for better understanding. . . a bag of numbers in a .txt file corresponds to the following plots: . histogram plot: . . bar plot: . . histogram plot with pdf: . . References . Stanford Archives: CS109- The Normal(Gaussian) Distribution . A Practical Overview on Probability Distributions: Andrea Viti, Alberto Terzi, Luca Bertolaccini . Awesome Scientific Computing: Nico Schlömer, GitHub Repository . math.statistics: Python 3.10 Source Code . Stack Overflow . Dependencies . probplotlib depends on the matplotlib library on top of your regular python installation. . pip install matplotlib . or . conda install matplotlib . Installation . probplotlib is available on the Python Package Index. You can install it directly using pip. . pip install probplotlib . Testing . To run the tests, simply check to this directory and run the code below. . python -m unittest test_probplotlib .",
            "url": "https://kunal-bhar.github.io/blog/python/math/probability/visualizations/2021/10/28/probplotlib.html",
            "relUrl": "/python/math/probability/visualizations/2021/10/28/probplotlib.html",
            "date": " • Oct 28, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://kunal-bhar.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://kunal-bhar.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kunal-bhar.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kunal-bhar.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}